<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover">
    <title>Post Dashboard</title>
    <link href="/styles/tailwind.css" rel="stylesheet">
    <style>
        /* Using a minimal style block for custom properties and base styles */
        :root {
            --ios-blue: #007aff;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'Helvetica Neue', sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        .note-item.selected {
            background-color: var(--ios-blue);
            color: white;
        }
        .note-item.selected .note-date {
            color: rgba(255, 255, 255, 0.7);
        }
    </style>
</head>
<body class="bg-gray-800 flex items-center justify-center h-screen p-4 md:p-8">

    <div class="app-window w-full max-w-5xl h-[80vh] bg-white rounded-lg shadow-2xl flex flex-col overflow-hidden">
        <!-- Title Bar -->
        <div class="title-bar h-12 bg-gray-200 border-b border-gray-300 flex-shrink-0"></div>
        
        <div class="main-container flex flex-grow min-h-0">
            <!-- Sidebar / Previous Posts -->
            <div id="sidebar" class="w-1/3 bg-gray-100 border-r border-gray-200 flex flex-col">
                <div class="p-4 border-b border-gray-200">
                    <h1 class="text-2xl font-bold">Posts</h1>
                </div>
                <div class="p-4 border-b border-gray-200">
                    <input type="search" id="search-input" placeholder="Search posts..." class="w-full text-sm bg-white border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>
                <div class="notes-list flex-grow overflow-y-auto">
                    <ul id="posts-list"></ul>
                    <div id="posts-loader" class="text-center p-4 text-gray-500 text-sm"></div>
                    <div id="posts-error" class="text-center p-4 text-red-500 text-sm"></div>
                </div>
                <div id="pagination-controls" class="hidden flex justify-between items-center p-2 border-t border-gray-200">
                    <button id="prev-button" class="text-sm font-semibold text-blue-600 px-3 py-1 rounded-md hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed">Prev</button>
                    <span id="page-indicator" class="text-xs text-gray-500"></span>
                    <button id="next-button" class="text-sm font-semibold text-blue-600 px-3 py-1 rounded-md hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed">Next</button>
                </div>
            </div>

            <!-- Content Area / Form -->
            <div class="content-area flex-grow flex flex-col bg-yellow-50">
                <form id="post-form" class="flex flex-col flex-grow">
                    <div class="p-6 border-b border-gray-200">
                        <input type="text" id="title" placeholder="Post Title" class="w-full text-3xl font-bold placeholder-gray-400 focus:outline-none bg-transparent">
                    </div>
                    <div class="p-6 flex-grow">
                        <textarea id="content" required placeholder="Start writing..." class="w-full h-full text-base placeholder-gray-400 focus:outline-none bg-transparent resize-none"></textarea>
                    </div>
                </form>
                
                 <!-- Attachments & Settings -->
                <div class="p-6 bg-white border-t border-gray-200 flex-shrink-0">
                    <div id="attachment-preview-container" class="hidden group relative mb-4">
                        <img id="attachment-preview" src="#" alt="Attachment preview" class="rounded-lg w-full max-h-40 object-contain border border-gray-200">
                        <button id="clear-attachment-button" class="absolute top-2 right-2 bg-black/50 text-white rounded-full p-1.5 hover:bg-black/70">
                            <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                        </button>
                    </div>
                    <div id="attachment-buttons" class="flex items-center gap-4 mb-4">
                        <button type="button" id="open-draw-popup" class="flex-1 text-center py-2 px-4 bg-gray-100 hover:bg-gray-200 rounded-lg text-sm font-medium">Draw Picture</button>
                        <label class="flex-1 text-center py-2 px-4 bg-gray-100 hover:bg-gray-200 rounded-lg text-sm font-medium cursor-pointer">
                            Upload Image
                            <input type="file" id="image-input" accept="image/*" class="hidden">
                        </label>
                    </div>
                     <div class="grid grid-cols-2 gap-4 mb-4">
                         <div>
                            <label for="image-path-input" class="text-xs text-gray-500 mb-1 block">Image Path</label>
                            <input type="text" id="image-path-input" class="w-full text-sm bg-gray-100 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                         </div>
                         <div>
                             <label for="image-shortcode-input" class="text-xs text-gray-500 mb-1 block">Shortcode Template</label>
                             <input type="text" id="image-shortcode-input" class="w-full text-sm bg-gray-100 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                         </div>
                     </div>
                     <div>
                        <label for="password" class="text-xs text-gray-500 mb-1 block">Password</label>
                        <input type="password" id="password" required class="w-full text-sm bg-gray-100 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <div class="flex items-center mt-2">
                            <input type="checkbox" id="save-password" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                            <label for="save-password" class="ml-2 block text-sm text-gray-700">Save Password</label>
                        </div>
                     </div>
                </div>
                 <div class="p-4 bg-white border-t border-gray-200 flex-shrink-0 space-y-2">
                    <button type="submit" id="submit-button" form="post-form" class="w-full py-2 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-semibold disabled:bg-gray-300">
                        <span id="button-text">Publish</span>
                    </button>
                    <button type="button" id="cancel-edit-button" class="hidden w-full py-2 px-4 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-lg font-semibold">Cancel Edit</button>
                    <div id="message-box" class="text-center text-sm"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Drawing Popup -->
    <div id="draw-popup" class="fixed inset-0 bg-black/40 flex justify-center items-center opacity-0 invisible transition-opacity duration-300 z-50">
        <div class="popup-content bg-white flex flex-col rounded-lg shadow-xl w-full max-w-2xl h-3/4 transform scale-95 opacity-0 transition-all duration-300">
            <header class="flex justify-between items-center p-4 border-b border-gray-200 flex-shrink-0">
                <button id="cancel-draw-button" class="text-blue-600 font-medium">Cancel</button>
                <h3 class="font-semibold">Draw</h3>
                <button id="save-draw-button" class="text-blue-600 font-bold">Done</button>
            </header>
            <main class="flex-grow relative bg-gray-100">
                <canvas id="drawing-canvas" class="absolute top-0 left-0 w-full h-full"></canvas>
            </main>
             <footer class="p-2 border-t border-gray-200 flex-shrink-0">
                 <div class="flex items-center justify-between w-full">
                     <button id="undo-button" class="p-2 text-gray-500 hover:bg-gray-100 rounded-full"><svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M12 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6" /></svg></button>
                     <div id="color-palette" class="flex items-center gap-2"></div>
                     <input type="color" id="color-picker" value="#000000" class="w-10 h-10 border-none rounded-full overflow-hidden">
                 </div>
            </footer>
        </div>
    </div>

    <script>
        // --- Element Selectors ---
        const form = document.getElementById('post-form');
        const submitButton = document.getElementById('submit-button');
        // ... (all other selectors from previous script)
        const postsList = document.getElementById('posts-list');
        const postsLoader = document.getElementById('posts-loader');
        const postsError = document.getElementById('posts-error');
        const titleInput = document.getElementById('title');
        const contentInput = document.getElementById('content');
        const passwordInput = document.getElementById('password');
        const savePasswordCheckbox = document.getElementById('save-password');
        const imageInput = document.getElementById('image-input');
        const searchInput = document.getElementById('search-input');
        const buttonText = document.getElementById('button-text');
        const messageBox = document.getElementById('message-box');
        const cancelEditButton = document.getElementById('cancel-edit-button');
        const imagePathInput = document.getElementById('image-path-input');
        const imageShortcodeInput = document.getElementById('image-shortcode-input');
        const attachmentPreviewContainer = document.getElementById('attachment-preview-container');
        const attachmentPreview = document.getElementById('attachment-preview');
        const clearAttachmentButton = document.getElementById('clear-attachment-button');
        const attachmentButtons = document.getElementById('attachment-buttons');
        const canvas = document.getElementById('drawing-canvas');
        const ctx = canvas.getContext('2d');
        const colorPicker = document.getElementById('color-picker');
        const drawPopup = document.getElementById('draw-popup');
        const openDrawPopupButton = document.getElementById('open-draw-popup');
        const cancelDrawButton = document.getElementById('cancel-draw-button');
        const saveDrawButton = document.getElementById('save-draw-button');
        const undoButton = document.getElementById('undo-button');
        const colorPalette = document.getElementById('color-palette');
        const paginationControls = document.getElementById('pagination-controls');
        const prevButton = document.getElementById('prev-button');
        const nextButton = document.getElementById('next-button');
        const pageIndicator = document.getElementById('page-indicator');


        // --- State Variables ---
        let allPostsCache = [];
        let editState = { path: null, sha: null, selectedElement: null };
        let isDrawing = false;
        let lastX = 0;
        let lastY = 0;
        let drawHistory = [];
        let currentAttachment = null;
        let currentPage = 1;
        const postsPerPage = 10;
        let totalPages = 1;

        // --- Attachment & Preview Functions ---
        function showAttachmentPreview(src, type) {
            currentAttachment = type;
            attachmentPreview.src = src;
            attachmentPreviewContainer.classList.remove('hidden');
            attachmentButtons.classList.add('hidden');
        }

        function clearAttachment() {
            attachmentPreview.src = '#';
            attachmentPreviewContainer.classList.add('hidden');
            attachmentButtons.classList.remove('hidden');
            imageInput.value = '';
            localStorage.removeItem('savedCanvas');
            currentAttachment = null;
        }
        
        // --- Canvas & Drawing Functions ---
        const paletteColors = ['#000000', '#FF3B30', '#FF9500', '#FFCC00', '#34C759', '#007AFF', '#5856D6', '#AF52DE'];

        function setupColorPalette() {
            paletteColors.forEach(color => {
                const button = document.createElement('button');
                button.className = 'w-6 h-6 rounded-full border-2 border-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-blue-500';
                button.style.backgroundColor = color;
                button.addEventListener('click', () => {
                    ctx.strokeStyle = color;
                    colorPicker.value = color;
                });
                colorPalette.appendChild(button);
            });
        }
        
        function resizeCanvas() {
            const dpr = window.devicePixelRatio || 1;
            const rect = canvas.getBoundingClientRect();
            canvas.width = rect.width * dpr;
            canvas.height = rect.height * dpr;
            ctx.scale(dpr, dpr);
            redrawCanvas();
        }

        function saveHistory() {
            if (canvas.width > 0 && canvas.height > 0) {
                 drawHistory.push(canvas.toDataURL());
            }
        }

        function undoLast() {
            if (drawHistory.length > 1) {
                drawHistory.pop();
                const lastState = drawHistory[drawHistory.length - 1];
                const img = new Image();
                img.onload = () => {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    ctx.drawImage(img, 0, 0, canvas.width / (window.devicePixelRatio || 1), canvas.height / (window.devicePixelRatio || 1));
                };
                img.src = lastState;
            } else {
                drawHistory = [];
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                saveHistory();
            }
        }

        function redrawCanvas() {
            if (drawHistory.length > 0) {
                 const lastState = drawHistory[drawHistory.length - 1];
                 const img = new Image();
                 img.onload = () => {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    ctx.drawImage(img, 0, 0, canvas.width / (window.devicePixelRatio || 1), canvas.height / (window.devicePixelRatio || 1));
                 };
                 img.src = lastState;
            } else {
                 ctx.clearRect(0, 0, canvas.width, canvas.height);
            }
        }
        
        function draw(e) {
            if (!isDrawing) return;
            e.preventDefault();
            const rect = canvas.getBoundingClientRect();
            const x = (e.clientX || e.touches[0].clientX) - rect.left;
            const y = (e.clientY || e.touches[0].clientY) - rect.top;
            ctx.lineJoin = 'round';
            ctx.lineCap = 'round';
            ctx.lineWidth = 5;
            ctx.beginPath();
            ctx.moveTo(lastX, lastY);
            ctx.lineTo(x, y);
            ctx.stroke();
            [lastX, lastY] = [x, y];
        }

        function startDrawing(e) {
            isDrawing = true;
            const rect = canvas.getBoundingClientRect();
            [lastX, lastY] = [(e.clientX || e.touches[0].clientX) - rect.left, (e.clientY || e.touches[0].clientY) - rect.top];
        }

        function stopDrawing() { 
            if (isDrawing) {
                isDrawing = false;
                saveHistory();
            }
        }

        // --- Popup Functions ---
        function openPopup() {
            const popupContent = drawPopup.querySelector('.popup-content');
            drawPopup.classList.remove('invisible', 'opacity-0');
            popupContent.classList.remove('scale-95', 'opacity-0');
            document.body.style.overflow = 'hidden';
            setTimeout(() => {
                resizeCanvas();
                if (drawHistory.length === 0) saveHistory();
            }, 50);
        }
        
        function closePopup() {
            const popupContent = drawPopup.querySelector('.popup-content');
            drawPopup.classList.add('opacity-0');
            popupContent.classList.add('scale-95', 'opacity-0');
            setTimeout(() => {
                drawPopup.classList.add('invisible');
            }, 300);
            document.body.style.overflow = '';
        }

        // --- Main API & Form Functions ---
        function renderPosts() {
            const searchTerm = searchInput.value.toLowerCase();
            let filteredPosts = allPostsCache.filter(post => post.name.toLowerCase().includes(searchTerm));
            filteredPosts.sort((a, b) => b.name.localeCompare(a.name));
            
            totalPages = Math.ceil(filteredPosts.length / postsPerPage);
            if (currentPage > totalPages) currentPage = totalPages > 0 ? totalPages : 1;
            const start = (currentPage - 1) * postsPerPage;
            const end = start + postsPerPage;
            const paginatedPosts = filteredPosts.slice(start, end);

            if (paginatedPosts.length === 0) {
                postsList.innerHTML = `<li class="p-4 text-center text-gray-500 text-sm">${allPostsCache.length === 0 ? 'No posts found.' : 'No posts match your search.'}</li>`;
            } else {
                 postsList.innerHTML = paginatedPosts.map(post => {
                    const postDate = new Date(post.name.substring(0, 10));
                    const dateString = isNaN(postDate) ? '' : postDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
                    
                    return `
                    <li class="note-item p-4 cursor-pointer border-b border-gray-200" data-path="${post.path}">
                        <div class="note-title font-semibold truncate">${post.name}</div>
                        <div class="note-date text-sm text-gray-500">${dateString}</div>
                    </li>`;
                }).join('');
            }
            
            postsList.querySelectorAll('.note-item').forEach(item => {
                item.addEventListener('click', () => handleEditClick(item.dataset.path, item));
            });
            
            if (totalPages > 1) {
                paginationControls.classList.remove('hidden');
                pageIndicator.textContent = `Page ${currentPage} of ${totalPages}`;
                prevButton.disabled = currentPage === 1;
                nextButton.disabled = currentPage === totalPages;
            } else {
                paginationControls.classList.add('hidden');
            }
        }
        
        async function fetchPosts() {
            postsLoader.textContent = 'Loading...';
            postsError.textContent = '';
            try {
                const response = await fetch('/api/get-posts');
                if (!response.ok) throw new Error('Failed to fetch posts.');
                const result = await response.json();
                allPostsCache = result.posts;
                currentPage = 1;
                renderPosts();
            } catch (error) {
                postsError.textContent = `Error: ${error.message}`;
            } finally {
                postsLoader.textContent = '';
            }
        }

        async function handleEditClick(path, element) {
            if (editState.selectedElement) {
                editState.selectedElement.classList.remove('selected');
            }
            element.classList.add('selected');
            
            messageBox.textContent = 'Fetching post...';
            
            const response = await fetch(`/api/get-post-content?path=${encodeURIComponent(path)}`);
            const responseText = await response.text();
            
            if (!response.ok) {
                messageBox.textContent = `Error: ${responseText}`;
                return;
            }

            try {
                const result = JSON.parse(responseText);
                const contentParts = result.content.split('---');
                const frontmatter = contentParts[1] || '';
                const mainContent = contentParts.slice(2).join('---').trim();
                const titleMatch = frontmatter.match(/title:\s*"(.*?)"/);

                titleInput.value = titleMatch ? titleMatch[1] : '';
                contentInput.value = mainContent;
                editState = { path, sha: result.sha, selectedElement: element };
                
                buttonText.textContent = 'Update Post';
                cancelEditButton.classList.remove('hidden');
                messageBox.textContent = 'Editing post. To change image, add a new one.';
                clearAttachment();
            } catch (error) {
                 messageBox.textContent = `Error parsing post content: ${error.message}`;
            }
        }
        
        function resetFormAndState() {
            form.reset();
            if (editState.selectedElement) {
                 editState.selectedElement.classList.remove('selected');
            }
            editState = { path: null, sha: null, selectedElement: null };
            buttonText.textContent = 'Publish';
            cancelEditButton.classList.add('hidden');
            clearAttachment();
            drawHistory = [];
            loadPassword();
            loadImagePath();
            loadShortcode();
        }
        
        // ... (the rest of the JS functions: savePassword, loadPassword, getBase64, handleFormSubmit, etc.)
        function savePassword() { if (savePasswordCheckbox.checked) localStorage.setItem('post_dashboard_password', passwordInput.value); else localStorage.removeItem('post_dashboard_password'); }
        function loadPassword() { const savedPassword = localStorage.getItem('post_dashboard_password'); if (savedPassword) { passwordInput.value = savedPassword; savePasswordCheckbox.checked = true; } }
        function saveImagePath() { localStorage.setItem('post_dashboard_image_path', imagePathInput.value); }
        function loadImagePath() { imagePathInput.value = localStorage.getItem('post_dashboard_image_path') || 'assets/img'; }
        function saveShortcode() { localStorage.setItem('post_dashboard_shortcode', imageShortcodeInput.value); }
        function loadShortcode() { imageShortcodeInput.value = localStorage.getItem('post_dashboard_shortcode') || '{{< img src="/img/IMAGE_NAME" >}}'; }
        function getBase64(file) { return new Promise((resolve, reject) => { const reader = new FileReader(); reader.readAsDataURL(file); reader.onload = () => resolve(reader.result); reader.onerror = error => reject(error); }); }

        async function handleFormSubmit(e) {
            e.preventDefault();
            savePassword(); saveImagePath(); saveShortcode();
            messageBox.textContent = '';
            submitButton.disabled = true;
            buttonText.textContent = editState.sha ? 'Updating...' : 'Publishing...';

            let imageData = null, imageName = null;
            try {
                if (currentAttachment === 'drawing') { imageData = localStorage.getItem('savedCanvas'); imageName = `drawing-${Date.now()}.png`; } 
                else if (currentAttachment === 'file' && imageInput.files[0]) { imageData = await getBase64(imageInput.files[0]); imageName = imageInput.files[0].name; }
            } catch (error) {
                messageBox.textContent = `Error: Could not read image file.`;
                submitButton.disabled = false;
                buttonText.textContent = editState.sha ? 'Update Post' : 'Publish';
                return;
            }
            
            try {
                let currentSha = editState.sha, newShortcode = '';
                if (imageData && imageName) {
                    buttonText.textContent = 'Uploading image...';
                    const imageResponse = await fetch('/api/upload-image', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ password: passwordInput.value, imageData, imageName, imagePath: imagePathInput.value }) });
                    const imageResultText = await imageResponse.text();
                    if (!imageResponse.ok) throw new Error(`Image upload failed: ${imageResultText}`);
                    const imageResult = JSON.parse(imageResultText);
                    newShortcode = imageShortcodeInput.value.replace('IMAGE_NAME', imageResult.uniqueImageName);
                    if (currentSha) {
                        await new Promise(resolve => setTimeout(resolve, 3000));
                        const shaResponse = await fetch(`/api/get-post-content?path=${encodeURIComponent(editState.path)}`);
                        if (!shaResponse.ok) throw new Error('Could not refetch post SHA.');
                        const shaResult = await shaResponse.json();
                        currentSha = shaResult.sha;
                    }
                }

                buttonText.textContent = currentSha ? 'Updating post...' : 'Publishing post...';
                const finalContent = newShortcode ? `${newShortcode}\n\n${contentInput.value}` : contentInput.value;
                const postResponse = await fetch('/api/create-post', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ title: titleInput.value, content: finalContent, password: passwordInput.value, client_iso_date: new Date().toISOString(), sha: currentSha, path: editState.path }) });
                const postResultText = await postResponse.text();
                if (!postResponse.ok) throw new Error(`Post creation failed: ${postResultText}`);
                const finalResult = JSON.parse(postResultText);

                messageBox.textContent = `Success! ${finalResult.message}`;
                resetFormAndState();
                await fetchPosts();
            } catch (error) {
                messageBox.textContent = `Error: ${error.message}`;
            } finally {
                submitButton.disabled = false;
                buttonText.textContent = editState.sha ? 'Update Post' : 'Publish';
            }
        }

        // --- Event Listeners ---
        form.addEventListener('submit', handleFormSubmit);
        cancelEditButton.addEventListener('click', resetFormAndState);
        searchInput.addEventListener('input', () => { currentPage = 1; renderPosts(); });
        clearAttachmentButton.addEventListener('click', clearAttachment);
        imageInput.addEventListener('change', async (e) => { if (e.target.files && e.target.files[0]) { const dataUrl = await getBase64(e.target.files[0]); showAttachmentPreview(dataUrl, 'file'); } });
        openDrawPopupButton.addEventListener('click', openPopup);
        cancelDrawButton.addEventListener('click', closePopup);
        undoButton.addEventListener('click', undoLast);
        saveDrawButton.addEventListener('click', () => { const dataUrl = canvas.toDataURL('image/png'); localStorage.setItem('savedCanvas', dataUrl); showAttachmentPreview(dataUrl, 'drawing'); closePopup(); });
        prevButton.addEventListener('click', () => { if (currentPage > 1) { currentPage--; renderPosts(); } });
        nextButton.addEventListener('click', () => { if (currentPage < totalPages) { currentPage++; renderPosts(); } });
        colorPicker.addEventListener('input', (e) => ctx.strokeStyle = e.target.value);
        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mousemove', draw);
        canvas.addEventListener('mouseup', stopDrawing);
        canvas.addEventListener('mouseout', stopDrawing);
        canvas.addEventListener('touchstart', startDrawing, { passive: false });
        canvas.addEventListener('touchmove', draw, { passive: false });
        canvas.addEventListener('touchend', stopDrawing);

        // --- Initial Load ---
        document.addEventListener('DOMContentLoaded', () => {
            loadPassword(); loadImagePath(); loadShortcode(); fetchPosts(); setupColorPalette();
        });
    </script>
</body>
</html>

